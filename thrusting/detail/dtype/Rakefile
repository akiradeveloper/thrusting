require "rake/clean"

types = [
  "char", "unsigned char",
  "short", "unsigned short",
  "int", "unsigned int",
  "long", "unsigned long",
  "long long",
  "float", "double"
]

tuple_types = [
  "char", "uchar",
  "short", "ushort",
  "int", "uint",
  "long", "ulong",
  "longlong",
  "float", "double"
]

CLOBBER.include("dtype.h", tuple_types.map { |t| t + ".h" })

"""
typedef typename tupleN<T>::type TN
"""

def typedef(n, type, type_n)
"""
typedef typename tuple#{n}<#{type}>::type #{type_n}#{n};
"""
end

def all_typedefs(type, tuple_type)
typedefs = (2..9).map do |i|
  typedef(i, type, tuple_type)
end
"""
#pragma once
#include <thrusting/tuple.h>
namespace thrusting {
#{typedefs.join("")}
}  
"""
end

types.zip(tuple_types).each do |type, tuple_type|
  file "#{tuple_type}.h" => "Rakefile" do |t|
    fname = t.name
    f = File.open(fname, "w")
    f.puts(all_typedefs(type, tuple_type))
    f.close
  end
end 

task :gen_dtype_h do
  f = File.open("dtype.h", "w")
  includes = tuple_types.map { |t| "#include \"#{t}.h\"" }
  f.puts(
"""
#pragma once
#{includes.join("\n")}
"""
  )
  f.close
end  

task :build => [:gen_dtype_h, tuple_types.map { |f| f + ".h" }].flatten
