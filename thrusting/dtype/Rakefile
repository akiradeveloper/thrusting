require "rake/clean"

"""
typedef typename tupleN<T>::type TN
"""

def typedef(n, type, type_n)
"""
typedef typename tuple#{n}<#{type}>::type #{type_n}#{n};
"""
end

types = [
  "char", "unsigned char",
  "short", "unsigned short",
  "int", "unsigned int",
  "long", "unsigned long",
  "long long",
  "float", "double", "size_t"
]

type_ns = [
  "char", "uchar",
  "short", "ushort",
  "int", "uint",
  "long", "ulong",
  "longlong",
  "float", "double", "size_t"
]

CLOBBER.include("dtype.h", type_ns.map { |t| t+".h" })

def all(type, type_n)
typedefs = (2..9).map do |i|
  typedef(i, type, type_n)
end
"""
#pragma once
#include \"../tuple_n_typedef.h\"
namespace thrusting {
#{typedefs.join("")}
}  
"""
end

types.zip(type_ns).each do |type, type_n|
  file "#{type_n}.h" => "Rakefile" do |t|
    fname = t.name
    f = File.open(fname, "w")
    f.puts(all(type, type_n))
    f.close
  end
end 

task :gen_typedef_h do
  includes = type_ns.map { |t| "#include \"#{t}.h\"" }
  f = File.open("dtype.h", "w")
  f.puts("#pragma once")
  f.puts(includes.join("\n"))
  f.close
end  

task :gen_header => [:gen_typedef_h, type_ns.map { |f| f + ".h" }].flatten
